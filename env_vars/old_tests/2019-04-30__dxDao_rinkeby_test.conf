#################################
#  DAO BOUNTY: 01/04/2019
#################################
##    https://dxdao.daostack.io/dashboard/
##
## DESCRIPTION:
##    Test Dao
##
##  Run in rinkeby:
##    PK=<private_key> ENV_PATH=./env_vars/2020-04-30__dxDao_rinkeby_test.conf yarn migrate --network rinkeby --reset | 2>&1 | tee deployment-rinkeby.txt

# Gas Price used for Deployuing the contracts
#   10 GWei (default)
GAS_PRICE_GWEI=20

# Time Zone (default 'Asia/Tel_Aviv')
#TIME_ZONE='Asia/Tel_Aviv'

# Basic DAO Data
##    For the default values, see: 
##      src/config/dao.js
##    Default values:
##      Token name:         dxDAO
##      Token Symbol:       DXD
##      Token CAP:          No CAP
##      Organizarion Name:  dxDAO
# TOKEN_NAME='dxDaoDemo'
# ORGANIZATION_NAME='dxDaoDemo'

# Periods
##    For the default values, see: 
##      src/config/timePeriods.js

## Overrides:
# Time Zone
# GMT+0
TIME_ZONE='Etc/GMT'

## T&C
# https://ipfs.io/ipfs/QmPD3i1VfMe8nZtV8VAWG6kMxfBT1wUhVi8C82FqJ6eWvo
AGREEMENT_HASH=QmPD3i1VfMe8nZtV8VAWG6kMxfBT1wUhVi8C82FqJ6eWvo

# Periods
## Initial distribution:
## Locking ETH and Whitelisted Tokens, registering to have your REP against your locked MGN, also Bidding with GEN
INITIAL_DISTRIBUTION_START='2019-04-30 12:00'
INITIAL_DISTRIBUTION_END='2019-05-02 12:00'

## Claiming period for REP for Locked MGN
CLAIMING_MGN_START='2019-05-02 06:00:01'
CLAIMING_MGN_END='2019-05-02 12:00'

## Redeem period
REDEEM_START='2019-05-02 12:00'

## Governance period start:
GOVERNANCE_START='2019-05-02 14:00'

# Locking contracts config
##    For the actual value, see: 
##      src/config/bootstrap.js
## Overrided config:
##    MAX_LOCKING_PERIOD = 30 days = 30*24*60*60 = 2592000
##    NUMBERS_OF_GEN_AUCTIONS=10
##      - Locking period = INITIAL_DISTRIBUTION_END - INITIAL_DISTRIBUTION_START
##      - Since the locking period is 14 days
##      - Auctions will last = 14*24/10 = 33,6 hours
NUMBERS_OF_GEN_AUCTIONS=10
MAX_LOCKING_PERIOD=2592000

## Intial REP distribution
##    For the actual amounts, see: 
##      src/config/initalRepDistribution.js
##
##    TOTAL: 1M
##      30% Lock whitelisted tokens
##      8%  Lock Eth
##      10% GEN Auctions
##      50% Locked MGN holding
##      2%  Contributions


## Voting (Genesis Protocol)
##    For the actual value, see: 
##      src/config/voting.js
##    Note that there's different voting parameters:
##      - dutchX: Affects Generic Scheme, which modifies the DutchX
##      - contributionReward: Affects the Contribution Reward Scheme
##      - admin: Affects the Scheme Registrar
## Overrided config:
##   - No override, uses the defaults

# The expiration period for proposal in normal queue
#   - the time limit for a proposal to be in an absolute voting mode.
#
#   6 days (6 * 24 * 60 * 60 = 518400)
QUEUED_VOTE_PERIOD_LIMIT=518400

# Time to resolve a boosted proposal
#   - the time limit for a proposal to be in an relative voting mode.
#
#   5 days (5 * 24 * 60 * 60 = 432000)
BOOSTED_VOTE_PERIOD_LIMIT=432000


# Time period to have the proposal stable in the pre-boosted queue
#   - the time limit for a proposal to be in an preparation
#
#   1 day (1 * 24 * 60 * 60 = 86400)
PRE_BOOSTED_VOTE_PERIOD_LIMIT=86400


#  Period where the decision cannot be swiched from a Yes/No (or otherwise)
#
#   1 day (1 * 24 * 60 * 60 = 86400)
QUIET_ENDING_PERIOD=86400



# Price Oracle implementation:
#   FixedPriceOracle: Uses the fixed price oracle
#   WhitelistPriceOracle: Uses the DutchX price oracle for the price, and it's own list for the 
#         whitelisted tokens
#   DutchXPriceOracle (default): Uses the MGN contract from DutchX (TokenFRTProxy)
PRICE_ORACLE_IMPL=WhitelistPriceOracle

# MGN Implementation:
#   TokenFRTProxy (default): Uses the real MGN contract from DutchX
#   MgnBasicMock: Uses a mock MGN contract, were any user can mint to himself
#   MgnOwnableMock: Uses a mock MGN contract, were only an owner can mint
MGN_IMPL=TokenFRTProxy
# In case of MgnOwnableMock transfer ownership to
#MGN_IMPL_OWNER=0x3d1df1a816577a62db61281f673c4f43ae063490 
# Don't transfer if falsy

# Use Wallet.sol instead of DutchX
#USE_MOCK_DX=true

# Use dx-contracts from networks-dev.json as opposed to networks.json
#   true: Uses the addresses from networks-dev.json in DutchX (instead of networks.json)
#   false (default): Uses the DutchX (the addresses defined in networks.json)
#USE_DEV_CONTRACTS=false

